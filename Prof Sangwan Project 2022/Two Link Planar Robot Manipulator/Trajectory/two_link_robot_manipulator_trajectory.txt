# importing required libraries
import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation, PillowWriter


# defining a few constants
g = 9.81
t1 = np.linspace(0, 40, 1001)


### change variable values here ###
m1 = 1
m2 = 1
l1 = 1
l2 = 1
theta1 = np.cos(t1)
theta2 = np.sin(t1)
w1 = - np.sin(t1)
w2 = np.cos(t1)
alpha1 = - np.cos(t1)
alpha2 = - np.sin(t1)
###################################


# function to find torques at each instant
def find_torques(m1, m2, l1, l2, theta1, theta2, w1, w2, alpha1, alpha2):
    c1 = m1 * (l1 ** 2) / 3 + m2 * (l1 ** 2) + m2 * (l2 ** 2) / 3 + m2 * l1 * l2 * np.cos(theta2)
    c2 = m2 * (l2 ** 2) / 3 + m2 * l1 * l2 * np.cos(theta2) / 2
    c3 = - m2 * l1 * l2 * np.sin(theta2) / 2
    c4 = (m1 / 2 + m2) * g * l1 * np.cos(theta1)
    c5 = m2 * g * l2 * np.cos(theta1 + theta2) / 2
    c6 = m2 * (l2 ** 2) / 3

    tau1 = c1 * alpha1 + c2 * alpha2 + 2 * c3 * w1 * w2 + c3 * (w2 ** 2) + c4 + c5
    tau2 = c2 * alpha1 + c6 * alpha2 - c3 * (w1 ** 2) + c5

    return (tau1, tau2)

tau1, tau2 = find_torques(m1, m2, l1, l2, theta1, theta2, w1, w2, alpha1, alpha2)


# obtaining the coordinates of the endpoints of the links
def get_coordinates(t, theta1, theta2, l1, l2):
    return (l1 * np.cos(theta1),
            l1 * np.sin(theta1),
            l1 * np.cos(theta1) + l2 * np.cos(theta1 + theta2),
            l1 * np.sin(theta1) + l2 * np.sin(theta1 + theta2))

x1, y1, x2, y2 = get_coordinates(t1, theta1, theta2, l1, l2)


# creating a GIF
def animate(i):
    ln1.set_data([0, x1[i], x2[i]], [0, y1[i], y2[i]])

fig, ax = plt.subplots(1,1, figsize=(8,8))
ln1, = plt.plot([], [], 'b-', lw=3)
ax.set_ylim(-4,4)
ax.set_xlim(-4,4)
ani = FuncAnimation(fig, animate, frames=1000, interval=50)
ani.save('./Two Link Planar Robot Manipulator/Trajectory/two_link_robot_manipulator_trajectory.gif', writer='pillow', fps=15)


# plotting the torques required as functions of time
plt.clf()
plt.plot(t1, tau1, label='Torque 1')
plt.plot(t1, tau2, label='Torque 2')
plt.xlabel('Time')
plt.ylabel('Torque')
plt.title('Torques vs Time')
plt.legend()
plt.savefig('./Two Link Planar Robot Manipulator/Trajectory/torques_required.png')
